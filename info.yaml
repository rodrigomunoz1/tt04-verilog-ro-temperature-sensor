--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt_um_rodrigomunoz1_rotempsensor_top.v
    - contador.v
    - promedio.v
    - USM_ringoscillator.v
    - uart_basic.v
    - uart_baud_tick_gen.v
    - uart_rx.v
    - uart_tx.v
    - data_sync.v
    - FSM_controller.v
    - mux.v
    - sky130_fd_sc_hd.v
  top_module:  "tt_um_rodrigomunoz1_rotempsensor_top"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Jorge Marin, Daniel Arevalos, Rodrigo Munoz"
  title:        "ring oscillator based temperature sensor"
  language:     "Verilog"
  description:  "Ring oscillator whose frecuency depends on temperature."

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Uses counters to determine the number of cycles of the ring oscillator 
      within a clock period, wich will then be sent through the UART to 
      determine the temperature vs frecuency caracteristic.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      After reset and enable are set, the ring oscillator should start and then 
      when a START code is received by UART, a value is sent back.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - clk_internal
    - clk_external
    - clk_sel
    - enable_inv_osc
    - enable_nand_osc
    - reset
    - rx
    - osc_sel
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - tx
    - sum[8]
    - sum[10]
    - sum[13]
    - sum[15]
    - sum[17]
    - sum[19]
    - sum[21]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - second counter bit 0
    - second counter bit 1
    - second counter bit 2
    - second counter bit 3
    - second counter bit 4
    - second counter bit 5
    - second counter bit 6
    - second counter bit 7

# The following fields are optional
  tag:          "timer, test"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "mattvenn"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
